import * as React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';

export function KotelLivePage() {
  const [isFullscreen, setIsFullscreen] = React.useState(false);
  const [viewMode, setViewMode] = React.useState<'youtube1' | 'youtube2' | 'arutzsheva' | 'earthcam' | 'official'>('youtube1');
  const [selectedSong, setSelectedSong] = React.useState<string | null>(null);
  const [currentTime, setCurrentTime] = React.useState(new Date());
  const [customSongs, setCustomSongs] = React.useState<Array<{id: string, title: string, url: string}>>([]);
  const [hiddenSongs, setHiddenSongs] = React.useState<string[]>([]);
  const [newSongUrl, setNewSongUrl] = React.useState('');
  const [newSongTitle, setNewSongTitle] = React.useState('');
  const [showAddSong, setShowAddSong] = React.useState(false);
  const [showManageSongs, setShowManageSongs] = React.useState(false);
  const [showPrayerOverlay, setShowPrayerOverlay] = React.useState(false);
  const [showTehillimOverlay, setShowTehillimOverlay] = React.useState(false);

  // Update time every minute
  React.useEffect(() => {
    const timer = setInterval(() => {
      setCurrentTime(new Date());
    }, 60000);
    return () => clearInterval(timer);
  }, []);

  // Load custom songs and hidden songs from localStorage on component mount
  React.useEffect(() => {
    const savedSongs = localStorage.getItem('kotelCustomSongs');
    if (savedSongs) {
      try {
        setCustomSongs(JSON.parse(savedSongs));
      } catch (error) {
        console.log('Error loading saved songs:', error);
      }
    }
    
    const savedHiddenSongs = localStorage.getItem('kotelHiddenSongs');
    if (savedHiddenSongs) {
      try {
        setHiddenSongs(JSON.parse(savedHiddenSongs));
      } catch (error) {
        console.log('Error loading hidden songs:', error);
      }
    }
  }, []);

  // Save custom songs to localStorage whenever they change
  React.useEffect(() => {
    localStorage.setItem('kotelCustomSongs', JSON.stringify(customSongs));
  }, [customSongs]);

  // Save hidden songs to localStorage whenever they change
  React.useEffect(() => {
    localStorage.setItem('kotelHiddenSongs', JSON.stringify(hiddenSongs));
  }, [hiddenSongs]);

  // Extract YouTube video ID from URL
  const extractYouTubeId = (url: string): string | null => {
    const patterns = [
      /(?:youtube\.com\/watch\?v=|youtu\.be\/|youtube\.com\/embed\/)([^&\n?#]+)/,
      /youtube\.com\/watch\?.*v=([^&\n?#]+)/
    ];
    
    for (const pattern of patterns) {
      const match = url.match(pattern);
      if (match) {
        return match[1];
      }
    }
    return null;
  };

  // Add a new custom song
  const addCustomSong = () => {
    if (!newSongUrl.trim() || !newSongTitle.trim()) {
      alert('Please enter both a song title and YouTube URL');
      return;
    }

    const videoId = extractYouTubeId(newSongUrl);
    if (!videoId) {
      alert('Please enter a valid YouTube URL');
      return;
    }

    const newSong = {
      id: videoId,
      title: newSongTitle.trim(),
      url: newSongUrl.trim()
    };

    setCustomSongs(prev => [...prev, newSong]);
    setNewSongUrl('');
    setNewSongTitle('');
    setShowAddSong(false);
  };

  // Hide/unhide a preset song
  const toggleSongVisibility = (songId: string) => {
    setHiddenSongs(prev => {
      if (prev.includes(songId)) {
        return prev.filter(id => id !== songId);
      } else {
        return [...prev, songId];
      }
    });
    if (selectedSong === songId) {
      setSelectedSong(null);
    }
  };

  // Remove a custom song
  const removeCustomSong = (songId: string) => {
    setCustomSongs(prev => prev.filter(song => song.id !== songId));
    if (selectedSong === songId) {
      setSelectedSong(null);
    }
  };

  // Songs for listening by the Kotel
  const kotelSongs = [
    {
      id: 'vdr9PEu2DFY',
      title: 'Im Eshkachech - Lev Tahor',
      url: 'https://youtu.be/vdr9PEu2DFY?si=-5PkhkFwDkEC_cvt'
    },
    {
      id: 'jues4wiAFnQ',
      title: 'Im Eshkachech - Ben Snof', 
      url: 'https://youtu.be/jues4wiAFnQ?si=PVgVFWbBJhudwQn5'
    },
    {
      id: 'ZY1dc9HlMPY',
      title: 'Yerushalayim - Abie R.',
      url: 'https://youtu.be/ZY1dc9HlMPY?si=Q0bS0DwVZGvzKhOg'
    },
    {
      id: 'niTWPbC8gXo',
      title: 'Yerushalayim Shel Zahav - Shulem Lemmer',
      url: 'https://youtu.be/niTWPbC8gXo?si=ongBxif84WgN5IwH'
    },
    {
      id: 'JH8gtdDA5x0',
      title: 'Yerushalayim Shel Zahav - Original Ofra Haza',
      url: 'https://youtu.be/JH8gtdDA5x0?si=rbE7UpGwW-yrum6v'
    },
    {
      id: '0OYIQjmEqT8',
      title: 'October Rain - Nitay Twito',
      url: 'https://youtu.be/0OYIQjmEqT8?si=dciNiFj3_EV9hhS0'
    },
    {
      id: 'D2gBJ58drtg',
      title: 'October Rain - Shulem Lemmer',
      url: 'https://youtu.be/D2gBJ58drtg?si=Nmx2kLuO-i-N9oHa'
    },
    {
      id: 'lJYn09tuPw4',
      title: 'October Rain - Eden Golan (Eurovision 2024)',
      url: 'https://youtu.be/lJYn09tuPw4?si=WZi_OtnghbPr6MXU'
    },
    {
      id: 'Q3BELu4z6-U',
      title: 'New Day Will Rise - Yuval Raphael (Nova Survivor - Eurovision 2025)',
      url: 'https://youtu.be/Q3BELu4z6-U?si=wTbufkVzzmhJLOLf'
    },
    {
      id: '1h6dIEQMz3s',
      title: 'Am Yisrael Chai - Benny Friedman',
      url: 'https://youtu.be/1h6dIEQMz3s?si=EJHiD9q4F6YHpm-8'
    },
    {
      id: 'fHuzLmbcobo',
      title: 'Ahavas Yisrael - Dovid Dachs & Yehuda Gross',
      url: 'https://youtu.be/fHuzLmbcobo?si=YrBifUihqFDCGC8M'
    },
    {
      id: 'mOW5xnQuLY4',
      title: 'Yallah Ya Nasrallah - Anti Hezbollah Song',
      url: 'https://youtu.be/mOW5xnQuLY4?si=9I13hPUk5pkX-szh'
    },
    {
      id: '2p3rtnQ_7y4',
      title: 'Am Yisrael Chai - Eyal Golan',
      url: 'https://youtu.be/2p3rtnQ_7y4?si=VhASvd-Iek8AZoAx'
    },
    {
      id: 'OGjvSId7wZY',
      title: 'We Want Moshiach Now - Eli Markus',
      url: 'https://youtu.be/OGjvSId7wZY?si=K9scp4SbbFGKGHV_'
    },
    {
      id: 'm-8JfR9_LFA',
      title: 'Tamid Ohev Oti - Itzik Dadya',
      url: 'https://youtu.be/m-8JfR9_LFA?si=oGdqKpjDXokQJP5x'
    },
    {
      id: '1xkVj3sKulw',
      title: 'Rachel Mevaka - Ari Cukier',
      url: 'https://youtu.be/1xkVj3sKulw?si=dvUrU9Yr0pJbk3IP'
    },
    {
      id: 'OMXHlwUfG-E',
      title: 'Misheberach LeTzahal',
      url: 'https://youtu.be/OMXHlwUfG-E?si=h2U9EEtAjXBw9Dkq'
    },
    {
      id: 'skGfPPwJjf8',
      title: 'Nachamu Ami - Aryeh Kunstler',
      url: 'https://youtu.be/skGfPPwJjf8?si=xY6qg8L7Rdm-_iL6'
    },
    {
      id: 'SsGhspYDV18',
      title: 'Hold In Tight - Benny Friedman & Eli Levine',
      url: 'https://youtu.be/SsGhspYDV18?si=g-1bEZvgpIkPY-tx'
    },
    {
      id: 'vkInPUky6-w',
      title: 'Vizakeini - Baruch Levine & Benny Friedman',
      url: 'https://youtu.be/vkInPUky6-w?si=Fv4m5YRS4pPWfU4x'
    },
    {
      id: 'OetNIKF_ZSc',
      title: 'Emunah & Bitachon - Benny Friedman',
      url: 'https://youtu.be/OetNIKF_ZSc?si=Vymtv-fWd8yMPcsk'
    },
    {
      id: 'zGz_eVHddfo',
      title: 'A Yid - Benny Friedman',
      url: 'https://youtu.be/zGz_eVHddfo?si=Nf4PgKyuuawGY_Wk'
    },
    {
      id: 'iTxCW9dr4Sk',
      title: 'Bilvovi - Miami Boys Choir',
      url: 'https://youtu.be/iTxCW9dr4Sk?si=Fo7MXPg0HnhsdZ8h'
    },
    {
      id: 'ondtspOUSGE',
      title: 'A Gutteh Vuch - Joey Newcomb',
      url: 'https://youtu.be/ondtspOUSGE?si=TGS8NUGzuZfVyyGC'
    },
    {
      id: 'jaDgBgMLW6k',
      title: 'We May All Be Different - Joey Newcomb & Benny Friedman',
      url: 'https://youtu.be/jaDgBgMLW6k?si=jowdkgPTwAAihV32'
    },
    {
      id: 'BQuNMi8scuA',
      title: 'Kshe HaLev Boche - Oziya Tzadok',
      url: 'https://youtu.be/BQuNMi8scuA?si=QmXyi-k_3zsMrqfD'
    },
    {
      id: '_qkwIouru7Y',
      title: 'Shema Yisrael - Sarit Hadad',
      url: 'https://youtu.be/_qkwIouru7Y?si=TFmevPeAjwyMhv_n'
    },
    {
      id: 'yeCCwKcRVKQ',
      title: 'Build The World - Joey Newcomb',
      url: 'https://youtu.be/yeCCwKcRVKQ?si=f_PxuDNDdvXVKE_Y'
    },
    {
      id: '74BQqHzCFpQ',
      title: 'Smile Again - Joey Newcomb & Mendy Wald',
      url: 'https://youtu.be/74BQqHzCFpQ?si=VsR3CBeAO6hM3p_S'
    },
    {
      id: 'GlqkWOe9s0Q',
      title: 'Yerushalayim - Joey Newcomb & Mendy Wald',
      url: 'https://youtu.be/GlqkWOe9s0Q?si=lTj5KhzlnTvUbltF'
    },
    {
      id: '7Kcku1nylLs',
      title: 'Moshiach - Joey Newcomb & Mendy Wald',
      url: 'https://youtu.be/7Kcku1nylLs?si=lqGIPlMSYIqbpzez'
    },
    {
      id: 'S_8KOTXhEqY',
      title: 'Nachamu - Joey Newcomb',
      url: 'https://youtu.be/S_8KOTXhEqY?si=YBEl97PCavBXeYlE'
    },
    {
      id: 'just-love-them',
      title: 'Just Love Them - Joey Newcomb',
      url: '#'
    },
    {
      id: 'thank-you-hashem',
      title: 'Thank You Hashem - Joey Newcomb',
      url: '#'
    },
    {
      id: 'BGrzh3W-F-c',
      title: 'Hava Negilla - Gad Elbaz',
      url: 'https://youtu.be/BGrzh3W-F-c?si=v4EK09soNGePnC1C'
    },
    {
      id: 'X7UqipfGbC0',
      title: 'Ana BeKoach - Ovadia Hamama',
      url: 'https://youtu.be/X7UqipfGbC0?si=_e6fEzdtev0jkkAq'
    },
    {
      id: 'SQ5xNYP0HRY',
      title: 'Ana BeKoach - Dikla Orbach Hakmon',
      url: 'https://youtu.be/SQ5xNYP0HRY?si=HgKZGoku7N_HpK6c'
    },
    {
      id: 'c4aszHzF61E',
      title: 'An Everlasting Love - Shlomo Katz',
      url: 'https://youtu.be/c4aszHzF61E?si=dwN1_2g9qI2Xh7Qo'
    },
    {
      id: 'gSK-8ci3fWE',
      title: 'Waken In Our Hearts - Shlomo Katz',
      url: 'https://youtu.be/gSK-8ci3fWE?si=s-e3Jmv4Zn2FYoxA'
    },
    {
      id: 'yHF1RbbfB5U',
      title: 'Tatty My King - Benny F.',
      url: 'https://youtu.be/yHF1RbbfB5U?si=J_zgqlXMIe3d41Sh'
    }
  ];

  // Combined songs collection (preset + custom), filtering out hidden songs
  const visiblePresetSongs = kotelSongs.filter(song => !hiddenSongs.includes(song.id));
  const allSongs = [...visiblePresetSongs, ...customSongs];

  // Get current time in Israel (Jerusalem timezone)
  const getIsraeliTime = () => {
    return new Date().toLocaleString('en-US', {
      timeZone: 'Asia/Jerusalem',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
      hour12: true
    });
  };

  const getIsraeliDate = () => {
    return new Date().toLocaleDateString('en-US', {
      timeZone: 'Asia/Jerusalem',
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  };

  // Approximate prayer times (these would ideally come from an API)
  const getPrayerTimes = () => {
    const now = new Date();
    return {
      shacharit: '6:30 AM',
      mincha: '6:45 PM',
      maariv: '8:15 PM',
      sunset: '7:30 PM',
      shabbatStart: 'Friday 7:25 PM',
      shabbatEnd: 'Saturday 8:30 PM'
    };
  };

  const toggleFullscreen = () => {
    setIsFullscreen(!isFullscreen);
  };

  const renderStream = () => {
    const height = isFullscreen ? "100vh" : "600px";
    
    switch (viewMode) {
      case 'youtube1':
        return (
          <div className="relative" style={{ height }}>
            <iframe
              width="100%"
              height="100%"
              src="https://www.youtube.com/embed/-M4IndOjLtY?autoplay=1&mute=1&loop=1&playlist=-M4IndOjLtY"
              title="Kotel Live Stream - Western Wall Jerusalem"
              frameBorder="0"
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
              allowFullScreen
              className="rounded-lg"
            />
          </div>
        );
      case 'youtube2':
        return (
          <div className="relative" style={{ height }}>
            <iframe
              width="100%"
              height="100%"
              src="https://www.youtube.com/embed/ZNhY7_RyKRM?autoplay=1&mute=1&loop=1&playlist=ZNhY7_RyKRM"
              title="Alternative Kotel Live Stream"
              frameBorder="0"
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
              allowFullScreen
              className="rounded-lg"
            />
          </div>
        );
      case 'arutzsheva':
        return (
          <div className="relative" style={{ height }}>
            <iframe
              width="100%"
              height="100%"
              src="https://www.youtube.com/embed/UlIMJdOPEDQ?autoplay=1&mute=1&loop=1&playlist=UlIMJdOPEDQ"
              title="Jerusalem View - Alternative Stream"
              frameBorder="0"
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
              allowFullScreen
              className="rounded-lg"
            />
          </div>
        );
      case 'earthcam':
        return (
          <div className="relative" style={{ height }}>
            <iframe
              width="100%"
              height="100%"
              src="https://www.youtube.com/embed/dJXVsYSz_oc?autoplay=1&mute=1&loop=1&playlist=dJXVsYSz_oc"
              title="Jerusalem Live - EarthCam Style"
              frameBorder="0"
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
              allowFullScreen
              className="rounded-lg"
            />
          </div>
        );
      case 'official':
        return (
          <div className="relative" style={{ height }}>
            <iframe
              width="100%"
              height="100%"
              src="https://www.youtube.com/embed/W8gNjGKJups?autoplay=1&mute=1&loop=1&playlist=W8gNjGKJups"
              title="Western Wall Official Live Stream"
              frameBorder="0"
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
              allowFullScreen
              className="rounded-lg"
            />
          </div>
        );
      default:
        return (
          <div className="flex items-center justify-center bg-gray-100 rounded-lg" style={{ height }}>
            <div className="text-center">
              <p className="text-gray-600 mb-4">📺 Unable to load content</p>
              <Button onClick={() => setViewMode('youtube1')} className="bg-blue-600 hover:bg-blue-700">
                Try Again
              </Button>
            </div>
          </div>
        );
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-blue-50 to-purple-50">
      <div className="max-w-6xl mx-auto py-8 px-4">
        {/* Header Section */}
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-blue-800 mb-4">🕊️ The Western Wall - Live Stream</h1>
          <p className="text-lg text-gray-700 mb-2">
            Connect spiritually with the holiest place in Judaism
          </p>
          <p className="text-sm text-gray-600 italic">
            "May your prayers ascend to Heaven from this sacred place"
          </p>
        </div>

        {/* Live Stream Section */}
        <Card className="mb-8 shadow-2xl border-2 border-blue-200">
          <CardHeader className="bg-gradient-to-r from-blue-600 to-purple-600 text-white">
            <CardTitle className="text-center text-2xl">
              🏛️ Live from Jerusalem - The Kotel
            </CardTitle>
          </CardHeader>
          <CardContent className="p-0">
            <div className={`relative ${isFullscreen ? 'fixed inset-0 z-50 bg-black flex items-center justify-center' : ''}`}>
              <div className={isFullscreen ? 'w-full h-full' : 'w-full'}>
                {renderStream()}
              </div>
              
              {/* Stream Controls */}
              <div className="absolute bottom-4 left-4 flex flex-wrap gap-2">
                <Button
                  onClick={() => {
                    const modes: Array<'youtube1' | 'youtube2' | 'arutzsheva' | 'earthcam' | 'official'> = ['youtube1', 'youtube2', 'arutzsheva', 'earthcam', 'official'];
                    const currentIndex = modes.indexOf(viewMode);
                    const nextIndex = (currentIndex + 1) % modes.length;
                    setViewMode(modes[nextIndex]);
                  }}
                  className="bg-black/70 hover:bg-black/90 text-white"
                  size="sm"
                >
                  📺 Switch Source
                </Button>
                <Button
                  onClick={() => window.location.reload()}
                  className="bg-black/70 hover:bg-black/90 text-white"
                  size="sm"
                >
                  🔄 Refresh
                </Button>
                <Button
                  onClick={toggleFullscreen}
                  className="bg-black/70 hover:bg-black/90 text-white"
                  size="sm"
                >
                  {isFullscreen ? '🔲 Exit Fullscreen' : '⛶ Fullscreen'}
                </Button>
                <Button
                  onClick={() => window.open('https://www.youtube.com/watch?v=-M4IndOjLtY', '_blank')}
                  className="bg-black/70 hover:bg-black/90 text-white"
                  size="sm"
                >
                  🌐 Open on YouTube
                </Button>
              </div>

              {/* Exit Fullscreen Button */}
              {isFullscreen && (
                <Button
                  onClick={toggleFullscreen}
                  className="absolute top-4 right-4 bg-red-600 hover:bg-red-700 text-white z-10"
                  size="lg"
                >
                  ✕ Exit Fullscreen
                </Button>
              )}
            </div>
          </CardContent>
        </Card>

        {/* Tehillim Section - appears immediately under Kotel when opened */}
        {showTehillimOverlay && (
          <Card className="mb-6 border-2 border-purple-200 bg-gradient-to-br from-purple-50 to-indigo-50">
            <CardHeader>
              <div className="flex justify-between items-center">
                <CardTitle className="text-lg text-purple-800 flex items-center gap-2">
                  📖 Tehillim (Psalms) - Read While Watching the Kotel
                </CardTitle>
                <Button
                  onClick={() => setShowTehillimOverlay(false)}
                  className="bg-gray-500 hover:bg-gray-600 text-white px-3 py-1 text-sm"
                >
                  ✕ Close
                </Button>
              </div>
            </CardHeader>
            <CardContent>
              <div className="h-96 overflow-hidden rounded-lg border-2 border-purple-300">
                <iframe
                  src="https://www.sefaria.org/Psalms"
                  className="w-full h-full border-0"
                  title="Tehillim - Book of Psalms"
                  allow="fullscreen"
                />
              </div>
              <p className="text-xs text-purple-600 text-center mt-2">
                📿 Choose any Psalm to read while watching the Kotel live stream above
              </p>
            </CardContent>
          </Card>
        )}

        {/* Prayer Section - appears immediately under Kotel when opened */}
        {showPrayerOverlay && (
          <Card className="mb-6 border-2 border-blue-200 bg-gradient-to-br from-blue-50 to-cyan-50">
            <CardHeader>
              <div className="flex justify-between items-center">
                <CardTitle className="text-lg text-blue-800 flex items-center gap-2">
                  🤲 Siddur Ashkenaz - Prayers & Blessings
                </CardTitle>
                <Button
                  onClick={() => setShowPrayerOverlay(false)}
                  className="bg-gray-500 hover:bg-gray-600 text-white px-3 py-1 text-sm"
                >
                  ✕ Close
                </Button>
              </div>
            </CardHeader>
            <CardContent>
              <div className="h-96 overflow-hidden rounded-lg border-2 border-blue-300">
                <iframe
                  src="https://www.sefaria.org/Siddur_Ashkenaz?tab=contents"
                  className="w-full h-full border-0"
                  title="Siddur Ashkenaz - Prayer Book"
                  allow="fullscreen"
                />
              </div>
              <p className="text-xs text-blue-600 text-center mt-2">
                🕯️ Browse the complete prayer book while watching the Kotel above
              </p>
            </CardContent>
          </Card>
        )}

        {/* Information Section */}
        <div className="grid md:grid-cols-2 gap-6 mb-8">
          <Card className="border-2 border-yellow-200 bg-gradient-to-br from-yellow-50 to-orange-50">
            <CardHeader>
              <CardTitle className="text-xl text-amber-800 flex items-center gap-2">
                �️ About the Western Wall
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-gray-700 leading-relaxed">
                The Western Wall (Kotel) is the most sacred place where Jews are permitted to pray. 
                It is the last remaining wall of the Second Temple, destroyed in 70 CE. 
                For nearly 2,000 years, Jews from around the world have come here to pray and 
                place their written prayers in the cracks of the ancient stones.
              </p>
            </CardContent>
          </Card>

          <Card className="border-2 border-blue-200 bg-gradient-to-br from-blue-50 to-indigo-50">
            <CardHeader>
              <CardTitle className="text-xl text-blue-800 flex items-center gap-2">
                🙏 Current Time & Prayer Times in Jerusalem
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                <div className="text-center p-3 bg-blue-100 rounded-lg border">
                  <p className="text-lg font-bold text-blue-900">{getIsraeliTime()}</p>
                  <p className="text-sm text-blue-700">{getIsraeliDate()}</p>
                </div>
                
                <div className="space-y-2 text-gray-700">
                  <div className="flex justify-between">
                    <span>🌅 Shacharit (Morning):</span>
                    <span className="font-semibold">{getPrayerTimes().shacharit}</span>
                  </div>
                  <div className="flex justify-between">
                    <span>🌇 Mincha (Afternoon):</span>
                    <span className="font-semibold">{getPrayerTimes().mincha}</span>
                  </div>
                  <div className="flex justify-between">
                    <span>🌙 Ma'ariv (Evening):</span>
                    <span className="font-semibold">{getPrayerTimes().maariv}</span>
                  </div>
                  <div className="flex justify-between">
                    <span>🌅 Sunset:</span>
                    <span className="font-semibold">{getPrayerTimes().sunset}</span>
                  </div>
                </div>
                
                <div className="pt-2 border-t border-blue-200">
                  <div className="flex justify-between text-sm">
                    <span>🕯️ Shabbat Begins:</span>
                    <span className="font-semibold">{getPrayerTimes().shabbatStart}</span>
                  </div>
                  <div className="flex justify-between text-sm">
                    <span>⭐ Shabbat Ends:</span>
                    <span className="font-semibold">{getPrayerTimes().shabbatEnd}</span>
                  </div>
                </div>
                
                <p className="text-xs text-gray-600 mt-3 italic text-center">
                  Times are approximate and may vary by season
                </p>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Hebrew Music Player Section */}
        <Card className="mb-8 border-2 border-green-200 bg-gradient-to-br from-green-50 to-emerald-50">
          <CardHeader>
            <CardTitle className="text-xl text-green-800 text-center flex items-center justify-center gap-2">
              🎵 Sacred Hebrew Songs - Listen While You Pray
            </CardTitle>
            <p className="text-center text-green-700 text-sm mt-2">
              Collection of {allSongs.length} Beautiful Songs ({visiblePresetSongs.length} preset + {customSongs.length} personal)
              {hiddenSongs.length > 0 && (
                <span className="text-gray-500"> • {hiddenSongs.length} hidden</span>
              )}
            </p>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="flex justify-between items-center">
                <p className="text-gray-700">
                  Enhance your spiritual connection with beautiful Hebrew songs and prayers
                </p>
                <div className="flex gap-2">
                  <Button
                    onClick={() => setShowManageSongs(!showManageSongs)}
                    className="bg-orange-600 hover:bg-orange-700 text-white"
                    size="sm"
                  >
                    {showManageSongs ? '✕ Close' : '⚙️ Manage Songs'}
                  </Button>
                  <Button
                    onClick={() => setShowAddSong(!showAddSong)}
                    className="bg-purple-600 hover:bg-purple-700 text-white"
                    size="sm"
                  >
                    {showAddSong ? '✕ Cancel' : '➕ Add Your Song'}
                  </Button>
                </div>
              </div>

              {/* Manage Songs Section */}
              {showManageSongs && (
                <div className="p-4 bg-orange-50 rounded-lg border-2 border-orange-200">
                  <h4 className="font-semibold text-orange-800 mb-3">Manage Your Music Collection</h4>
                  <div className="text-sm text-gray-700 mb-4">
                    Hide songs you don't want to see, or delete your personal songs. Hidden songs can be restored anytime.
                  </div>
                  
                  {/* Preset Songs Management */}
                  <div className="mb-6">
                    <h5 className="font-medium text-gray-800 mb-2">Preset Songs ({kotelSongs.length} total)</h5>
                    <div className="max-h-40 overflow-y-auto">
                      {kotelSongs.map((song, index) => (
                        <div key={song.id} className="flex items-center justify-between py-1 px-2 rounded hover:bg-orange-100">
                          <span className={`text-sm ${hiddenSongs.includes(song.id) ? 'text-gray-400 line-through' : 'text-gray-700'}`}>
                            {index + 1}. {song.title}
                          </span>
                          <Button
                            onClick={() => toggleSongVisibility(song.id)}
                            className={`text-xs px-2 py-1 ${
                              hiddenSongs.includes(song.id) 
                                ? 'bg-green-600 hover:bg-green-700 text-white' 
                                : 'bg-gray-600 hover:bg-gray-700 text-white'
                            }`}
                          >
                            {hiddenSongs.includes(song.id) ? '👁️ Show' : '🚫 Hide'}
                          </Button>
                        </div>
                      ))}
                    </div>
                  </div>
                  
                  {/* Custom Songs Management */}
                  {customSongs.length > 0 && (
                    <div>
                      <h5 className="font-medium text-gray-800 mb-2">Your Personal Songs ({customSongs.length})</h5>
                      <div className="max-h-32 overflow-y-auto">
                        {customSongs.map((song, index) => (
                          <div key={song.id} className="flex items-center justify-between py-1 px-2 rounded hover:bg-orange-100">
                            <span className="text-sm text-gray-700">
                              {index + 1}. {song.title}
                            </span>
                            <Button
                              onClick={() => removeCustomSong(song.id)}
                              className="text-xs px-2 py-1 bg-red-600 hover:bg-red-700 text-white"
                            >
                              🗑️ Delete
                            </Button>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              )}

              {/* Add Song Form */}
              {showAddSong && (
                <div className="p-4 bg-purple-50 rounded-lg border-2 border-purple-200">
                  <h4 className="font-semibold text-purple-800 mb-3">Add a Meaningful Song</h4>
                  <div className="space-y-3">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Song Title (What this song means to you)
                      </label>
                      <input
                        type="text"
                        value={newSongTitle}
                        onChange={(e) => setNewSongTitle(e.target.value)}
                        placeholder="e.g., 'Mom's Favorite Song' or 'Our Wedding Dance'"
                        className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        YouTube URL
                      </label>
                      <input
                        type="url"
                        value={newSongUrl}
                        onChange={(e) => setNewSongUrl(e.target.value)}
                        placeholder="https://youtu.be/... or https://youtube.com/watch?v=..."
                        className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                      />
                    </div>
                    <div className="flex gap-2">
                      <Button
                        onClick={addCustomSong}
                        className="bg-green-600 hover:bg-green-700 text-white"
                        size="sm"
                      >
                        💝 Add Song
                      </Button>
                      <Button
                        onClick={() => setShowAddSong(false)}
                        className="bg-gray-500 hover:bg-gray-600 text-white"
                        size="sm"
                      >
                        Cancel
                      </Button>
                    </div>
                  </div>
                </div>
              )}
              
              {/* Song Selection Grid */}
              <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-4 xl:grid-cols-5 gap-3">
                {allSongs.map((song, index) => {
                  const isCustomSong = customSongs.some(customSong => customSong.id === song.id);
                  return (
                    <div key={song.id} className="relative">
                      <Button
                        onClick={() => setSelectedSong(selectedSong === song.id ? null : song.id)}
                        className={`h-auto p-3 text-left w-full ${
                          selectedSong === song.id 
                            ? 'bg-green-600 hover:bg-green-700 text-white' 
                            : isCustomSong
                            ? 'bg-purple-50 hover:bg-purple-100 text-purple-800 border border-purple-200'
                            : 'bg-white hover:bg-green-50 text-green-800 border border-green-200'
                        }`}
                      >
                        <div className="flex flex-col items-center gap-1 text-center">
                          <span className="text-lg">
                            {selectedSong === song.id ? '🎵' : isCustomSong ? '💝' : '▶️'}
                          </span>
                          <div>
                            <p className="font-medium text-[10px] leading-tight">
                              {song.title}
                            </p>
                            <p className="text-xs opacity-75 text-[9px]">
                              {isCustomSong ? 'Personal Song' : 'Hebrew Song'}
                            </p>
                          </div>
                        </div>
                      </Button>
                      
                      {/* Remove button for custom songs only in the song grid */}
                      {isCustomSong && (
                        <Button
                          onClick={() => removeCustomSong(song.id)}
                          className="absolute -top-2 -right-2 w-6 h-6 p-0 bg-red-500 hover:bg-red-600 text-white rounded-full"
                          size="sm"
                        >
                          ×
                        </Button>
                      )}
                    </div>
                  );
                })}
              </div>

              {/* Selected Song Player */}
              {selectedSong && (
                <div className="mt-6 p-4 bg-white rounded-lg border-2 border-green-300">
                  <div className="flex justify-between items-center mb-3">
                    {(() => {
                      const currentSong = allSongs.find(s => s.id === selectedSong);
                      return (
                        <>
                          <h4 className="font-semibold text-green-800">
                            🎵 {currentSong?.title || 'Unknown Song'}
                          </h4>
                          <Button
                            onClick={() => setSelectedSong(null)}
                            size="sm"
                            className="bg-red-500 hover:bg-red-600 text-white"
                          >
                            ✕ Close
                          </Button>
                        </>
                      );
                    })()}
                  </div>
                  
                  {/* Embedded YouTube Music Player */}
                  <div className="space-y-4">
                    <div className="bg-white rounded-lg border-2 border-green-200 overflow-hidden">
                      <iframe
                        width="100%"
                        height="315"
                        src={`https://www.youtube.com/embed/${selectedSong}?autoplay=0&rel=0`}
                        title={allSongs.find(s => s.id === selectedSong)?.title || 'Hebrew Song'}
                        frameBorder="0"
                        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                        allowFullScreen
                        className="w-full"
                      />
                    </div>
                      
                      <div className="grid gap-3 max-w-md mx-auto">
                        <Button
                          onClick={() => {
                            const song = allSongs.find(s => s.id === selectedSong);
                            if (song) window.open(song.url, '_blank');
                          }}
                          className="bg-red-600 hover:bg-red-700 text-white w-full"
                          size="lg"
                        >
                          � Listen on YouTube
                        </Button>
                        
                        <Button
                          onClick={() => {
                            const song = allSongs.find(s => s.id === selectedSong);
                            if (song) {
                              window.open(`https://music.youtube.com/watch?v=${selectedSong}`, '_blank');
                            }
                          }}
                          className="bg-orange-600 hover:bg-orange-700 text-white w-full"
                        >
                          🎵 YouTube Music
                        </Button>
                        
                        <Button
                          onClick={() => {
                            const song = allSongs.find(s => s.id === selectedSong);
                            if (song) {
                              const searchQuery = encodeURIComponent(song.title);
                              window.open(`https://www.google.com/search?q=${searchQuery}+hebrew+song`, '_blank');
                            }
                          }}
                          className="bg-purple-600 hover:bg-purple-700 text-white w-full"
                        >
                          🔍 Search Elsewhere
                        </Button>
                        
                        <Button
                          onClick={() => {
                            const song = allSongs.find(s => s.id === selectedSong);
                            if (song) {
                              window.open(`https://open.spotify.com/search/${encodeURIComponent(song.title)}`, '_blank');
                            }
                          }}
                          className="bg-green-600 hover:bg-green-700 text-white w-full"
                        >
                          🎧 Try Spotify
                        </Button>
                      </div>
                    </div>

                    <div className="bg-blue-50 p-3 rounded-lg">
                      <p className="text-sm text-blue-700 text-center">
              )}

              <div className="text-center mt-4">
                <p className="text-sm text-gray-600 italic">
                  🎶 Let these sacred melodies accompany your prayers and meditation
                </p>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Spiritual Connection Section */}
        <Card className="border-2 border-purple-200 bg-gradient-to-br from-purple-50 to-pink-50">
          <CardHeader>
            <CardTitle className="text-xl text-purple-800 text-center flex items-center justify-center gap-2">
              💜 Connecting Through the Live Stream
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-center space-y-4">
              <p className="text-gray-700 leading-relaxed">
                Even from afar, you can connect spiritually with this holy place. 
                Take a moment to say a prayer, reflect on your loved ones, or simply 
                feel the presence of thousands of years of Jewish prayer and tradition.
              </p>
              <div className="bg-white/70 p-4 rounded-lg border border-purple-200">
                <p className="text-sm text-purple-800 italic">
                  "From the depths I call to You, O Lord" - Psalm 130:1
                </p>
              </div>
              <div className="flex justify-center space-x-4 pt-2">
                <Button 
                  onClick={() => setShowTehillimOverlay(true)}
                  className="bg-purple-600 hover:bg-purple-700 text-white"
                >
                  📖 Read Tehillim
                </Button>
                <Button 
                  onClick={() => setShowPrayerOverlay(true)}
                  className="bg-blue-600 hover:bg-blue-700 text-white"
                >
                  🤲 Open Siddur (Prayers)
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Current Stream Source Indicator */}
        <div className="text-center mt-6">
          <p className="text-sm text-gray-600">
            Current source: <span className="font-semibold capitalize">{viewMode}</span>
            {viewMode === 'youtube1' && ' (HD YouTube Stream)'}
            {viewMode === 'youtube2' && ' (Alternative YouTube)'}
            {viewMode === 'arutzsheva' && ' (Virtual Experience)'}
            {viewMode === 'earthcam' && ' (Skyline Webcam)'}
            {viewMode === 'official' && ' (Spiritual Connection)'}
          </p>
          <p className="text-xs text-gray-500 mt-1">
            If streams are unavailable, try different sources or use the spiritual connection options
          </p>
          <div className="mt-2 flex justify-center gap-2 flex-wrap">
            <Button 
              size="sm" 
              variant="outline" 
              onClick={() => setViewMode('youtube1')}
              className={viewMode === 'youtube1' ? 'bg-blue-100' : ''}
            >
              📺 YouTube HD
            </Button>
            <Button 
              size="sm" 
              variant="outline" 
              onClick={() => setViewMode('youtube2')}
              className={viewMode === 'youtube2' ? 'bg-blue-100' : ''}
            >
              📺 YouTube Alt
            </Button>
            <Button 
              size="sm" 
              variant="outline" 
              onClick={() => setViewMode('arutzsheva')}
              className={viewMode === 'arutzsheva' ? 'bg-purple-100' : ''}
            >
              🕊️ Virtual
            </Button>
            <Button 
              size="sm" 
              variant="outline" 
              onClick={() => setViewMode('earthcam')}
              className={viewMode === 'earthcam' ? 'bg-green-100' : ''}
            >
              📷 Webcam
            </Button>
            <Button 
              size="sm" 
              variant="outline" 
              onClick={() => setViewMode('official')}
              className={viewMode === 'official' ? 'bg-purple-100' : ''}
            >
              🏛️ Spiritual
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
}
